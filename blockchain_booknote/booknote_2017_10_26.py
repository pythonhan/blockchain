2017年10月26日
主要内容涉及：以太坊，超级账本

以太坊：

(1)以太坊对比特币针对数字货币交易的功能进一步进行了扩展，面向更为复杂和灵活的应用场景，支持了智能合约。从此，区块链技术的应用场景，从单一基于UTXO的数字
货币交易，延伸到图灵完备的通用计算领域。用户不在受限于仅能使用比特币脚本所支持的简单逻辑，而是可以自行设计任意复杂的合约逻辑。意义重大。

(2)以太坊的最初目标是打造一个智能合约的平台，该平台支持图灵完备的应用，按照智能合约的约定逻辑自动执行，理想情况下将不存在故障停机、审查、欺诈、以及第三方
干预等问题。

(3)以太坊项目官网网站：ethereum.org, 代码托管在github.com/ethereum

(4)以太坊区块链底层也是一个类似比特币网络的P2P网络平台，智能合约运行在网络中的以太坊虚拟机中。网络自身是公开可接入的，任何人都可以接入并参与网络中数据的维护
，提供运行以太坊虚拟机的资源。

(5)智能合约：是用计算机程序的方式来缔结和运行各种合约。以太坊支持通过图灵完备的高级语言(包括Solidity,Serpent,viper)等来开发智能合约。智能合约作为运行在以太坊
虚拟机(Ethereum Virual Machine, EVM)中的应用，可以接受来自外部的交易请求和事件，通过触发运行提前编写好的代码逻辑，进一步生成新的交易和事件，可以进一步调用其他
智能合约。智能合约的执行结果可能对以太坊网络上的账本状态进行更新，这些修改由于经过了以太坊网络中的共识，一旦确认后就无法被伪造和篡改。

(6)账户：以太坊采用了不同于UTXO模型的做法，引入了账户，直接用账户来记录系统状态。每个账户存储余额信息，智能合约代码和内部数据存储等。以太坊支持在不同的账户之间
转移数据，以实现更为复杂的逻辑。

(7)以太坊账户分为合约账户和外部账户，合约账户存储执行的智能合约代码，智能被外部账户激活调用；外部账户是以太币拥有者账户，对应到某公钥，有个人控制。当合约账户
被调用时，存储其中的智能合约会在矿工出的虚拟机中自动执行，并消耗一定的燃料。燃料通过外部账户中的以太币进行购买。

(8)交易，是以太坊中从一个账户到另一个账户的消息数据。消息数据可以使以太币或者合约执行参数。以太坊采用交易作为执行操作的最小单位。
与比特币网络类似，发送交易时，用户需要交纳一定的交易费用，通过以太币方式进行支付和消耗。

(9)以太币，是以太坊中的货币，主要用于购买燃料，支付给矿工，以维护以太坊网络运行智能合约的费用。以太币最小单位是wei,一个以太币等于10^18个wei
以太币同样可以通过挖矿来生成，成功生成新区块的以太坊矿工可以获得5个以太币的奖励，以及包含在区块内交易的燃料费用，用户也可以通过交易市场来直接购买以太币
目前，每年大约可以通过挖矿生成超过一千万个以太币，单个以太币的市场价格超过300美元

(10)燃料：控制某次交易执行指令的上限，每执行一条合约指令会消耗固定的燃料，当某个交易还未执行结束，而燃料消耗完时，合约执行终止并回滚状态。Gas可以和以太币
进行兑换，需要注意的是，以太币的价格是波动的，单运行某段智能合约的燃料费用可以是固定的，通过设定Gas价格等进行调节。

(11)以太坊目的上基本与比特币网络类似，为了支持更复杂的智能合约，以太坊在不少地方进行了改进，包括交易模型、共识、对攻击的防护和可扩展性等

(12)以太坊目前采用了基于成熟的PoW共识的变种算法Ethash协议作为共识机制。

(13)以太坊网络在降低攻击方面的核心设计思想仍然是通过经济激励机制来防止少数人作恶：
：所有交易都要提供交易费用，避免DDos攻击
：程序运行指令数通过Gas来限制，所消耗的费用超过设定上限时就会被取消，避免出现恶意合约。
这就确保了攻击者试图消耗网络中虚拟机的计算资源时，需要付出经济代价(支付大量的以太币)，同时难以通过构造恶意的循环或者不稳定合约代码来对网络造成破坏。

(14)以太坊客户端可用于接入以太坊网络，进行账户管理、交易、挖矿、智能合约等各方面操作。
以太坊社区现在提供了多种语言实现的客户端和开发库：
go-ethereum:Go语言实现
pyethapp:Python语言实现
go-ethereum的独立客户端Geth是最常用的以太坊客户端之一。用户可以通过安装Geth来接入以太坊网络并成为一个完整节点。Geth也可以作为一个HTTP-RPC服务器，对外暴露
JSON-RPC接口，供用户与以太坊网络交互。Geth源码托管于github.com/ethereum/go-ethereum

(15)以太坊钱包，对于只需要进行账户管理，以太坊转账，DApp使用等基本操作的用户，可以选择直观易用的钱包客户端。
Mist是官方提供的一套图形界面钱包客户端，既可以进行交易，也可以直接编写和部署智能合约。所编写的代码编译发布后，可以部署到区块链上，使用者可以通过发送调用
相应合约方法的交易来执行智能合约。

(16)IDE有许多服务于编写智能合约和DAPP的IDE：
Truffle:功能丰富的以太坊应用开发环境
Embark：DApp开发框架，支持集成以太坊、IPFS等
Remix：用于编写Solidity的IDE，内置调试器和测试环境

(17)网站资源：一些网站提供对以太坊网络的数据、运行在以太坊上的DApp等信息进行查看：
ethstats.net:实时查看网络的信息，如区块、价格、交易数等；
ethernodes.org:显示整个网络的历史统计信息，如客户端的分布情况等；
dapps.ethercasts.com:查看运行在以太坊上的DApp的信息，包括间接，所处阶段和状态等。


超级账本:

(1)超级账本(Hyperledger)项目是首个面向企业应用场景的开源分布式账本平台。超级账本项目为透明、公开、去中心化的企业级分布式账本技术提供开源参考实现，
并推动区块链和分布式账本相关协议、规范和标准的发展，项目官方网站：hyperledger.org

(2)超级账本是一个联合项目，由面向不同目的和场景的子项目构成，子项目包括：Fabric，Blockchain Exploerer等

(3)如果说以比特币为代表的数字货币提供了区块链技术应用的原型，以太坊为代表的智能合同平台延伸了区块链技术的功能，那么进一步引入权限控制和安全保障的超级账本
项目则开拓了区块链技术的全新领域。

(4)超级账本所有项目代码托管在Gerrit 和GitHub（只读，自动从Gerrit上同步）上，目前主要包括以下顶级项目：
Fabric:go,python,java,Node.js等实现，目标是区块链的基础核心平台，支持FBFT等新的共识机制，支持权限管理，最早由IBM和DAH发起。
Sawtooth:Intel主要发起人，支持全新的基于硬件芯片的共识机制PoET
Iroha:c++实现，面向网页和移动端特性
Blockchain Explorer:提供web界面操作，通过界面快速查看绑定区块链的状态信息等
等等

(5)Fabric最早加入超级账本项目中去，由IBM,DAH2015年提交，项目在Github上，https://github.com/hyperledger/fabric
该项目定位是面向企业的分布式账本平台，创新的引入了权限管理支持，设计上支持可插拔，可扩展，是首个面向联盟链场景的开源项目。
Fabric基于Go语言实现，目前处于活跃状态，已发布1.0正式版本。
Sawtooth由Intel提交，也是分布式账本，基于Python语言实现

(6)超级账本项目：收到linux基金会的支持，利用LF ID作为社区唯一的ID，个人申请ID免费，注册网址：https://identity.linuxfoundation.org/
用户使用该ID即可访问到：Jira,Gerrit,Rocketchat 等社区的开发工具

(7)Jira：进行任务和进度管理，是一套任务管理和事项跟踪的追踪平台，提供Web操作界面，使用方便

(8)Gerrit是一个负责代码协同的开源项目，很多企业和团队都是用它负责代码仓库管理和代码的审阅工作。Gerrit提供Web的操作界面，超级账本社区采用gerrit.hyperledger.org
作为官方的代码仓库，并实时同步代码到github.com/hyperledger作为只读对象

(9)RocketChat:在线沟通工具，支持多媒体消息，附件，提醒，搜索等功能，支持网页，桌面端，移动端等多种客户端，社区采用chat.hyperledger.org作为服务器。

超级账本部署和应用：

(1)对网络中节点角色进行解耦是Fabric设计中的一大创新，这也是联盟链场景下的特殊需求和环境所决定的